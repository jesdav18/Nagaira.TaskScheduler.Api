name: .NET CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Production

    steps:
    # Paso 1: Checkout del código
    - uses: actions/checkout@v4

    # Paso 2: Configurar .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Paso 3: Restaurar dependencias
    - name: Restore dependencies
      run: dotnet restore

    # Paso 4: Construir el proyecto
    - name: Build
      run: dotnet build --no-restore

    # Paso 5: Ejecutar pruebas
    - name: Test
      run: dotnet test --no-build --verbosity normal

    # Paso 6: Publicar la aplicación
    - name: Publish
      run: |
        set -e
        dotnet publish -c Release -o out
            # Listar los archivos generados
            echo "Archivos publicados:"
            ls -l out
            if [ ! -d "out" ] || [ -z "$(ls -A out)" ]; then
              echo "Error: Publicación fallida. El directorio 'out/' está vacío."
              exit 1
            fi

    # Paso 7: Listar los archivos publicados
    - name: List Published Files
      run: ls -l out

    # Paso 8: Desplegar a tu VPS usando SSH
    - name: Deploy to VPS via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_IP }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: 2222
        script: |
          # Crear el directorio de despliegue temporal en el VPS
          mkdir -p /tmp/deploy

          # Subir los archivos generados al VPS
          rsync -avz -e "ssh -p 2222" out/ ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:${{ secrets.VPS_API_PATH }}

          # Reiniciar el servicio en el VPS
          sudo systemctl restart api-task-scheduler.service
